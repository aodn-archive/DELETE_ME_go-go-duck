#!/bin/bash

# when downloading stuff from GeoServer we'll need to do some manipulation!
declare -r URL_PREFIX_PATTERN=/mnt/imos-t3/
declare -r URL_PREFIX_REPLACE=http://data.aodn.org.au/

# returns 0 if given file can be accessed by filesystem, 1 otherwise
# $1 - file to check
can_access_via_fs() {
    local file=$1; shift
    test -f $file
}

# removes attribute from a given subset
# $1 - subset
# $1 - attribute to remove
remove_attribute() {
    local subset=$1; shift
    local attribute=$1; shift

    local tmp_subset=`mktemp`
    echo "$subset" | tr -s ";" "\n" > $tmp_subset
    subset=`cat $tmp_subset | grep -v "^$attribute," | tr -s "\n" ";" | sed -e 's/;$//g'`
    rm -f $tmp_subset

    echo $subset
}

# formats output file with either a file:// prefix or http://data.aodn.org.au/
# prefix, depending if we can or cannot access the files locally
# $1 - list of urls file
format_output_file() {
    local file=$1; shift

    # post process file, see if filesystem is mounted?
    local sample_file=`head -1 $file`
    if [ -z "$sample_file" ]; then
        logger_warn "Sample file is an empty string"
    elif can_access_via_fs $sample_file; then
        # if the first file exists on disk, append a file:// prefix
        # this will use the linking method which is faster
        logger_info "Using linking method, could find '$sample_file' in its location"
        sed -i -e 's#^#file://#' $file
    else
        # if not, just use the download method
        logger_info "Using HTTP method, could not find '$sample_file' in its location"
        sed -i -e "s#${URL_PREFIX_PATTERN}#${URL_PREFIX_REPLACE}#" $file
    fi
}

# returns profile weight, which will be a multiplier for the job score
get_profile_weight() {
    # by default use 1 - no multiplying
    echo 1
}

# this function takes a subset and should output the estimated job score to the
# given file
# $1 - geoserver
# $2 - profile
# $3 - output file
# $4 - subset
get_score() {
    local geoserver=$1; shift
    local profile=$1; shift
    local output_file=$1; shift
    local subset="$1"; shift

    get_list_of_urls $geoserver $profile $output_file "$subset"

    local -i job_score=`wc -l $output_file | cut -d' ' -f1`
    local -i profile_weight=`get_profile_weight`
    local -i job_score=`expr $job_score \* $profile_weight`

    echo $job_score > $output_file
}

# this function takes a subset and should output the list of urls to the given
# file
# $1 - geoserver
# $2 - profile
# $3 - output file
# $4 - subset
get_list_of_urls() {
    local geoserver=$1; shift
    local profile=$1; shift
    local output_file=$1; shift
    local subset="$1"; shift

    # make attributes greppable!
    local tmp_attrs=`mktemp`
    echo "$subset" | tr -s ";" "\n" > $tmp_attrs
    time_coverage_start=`grep "^TIME," $tmp_attrs | cut -d, -f2`
    time_coverage_end=`grep "^TIME," $tmp_attrs | cut -d, -f3`
    rm -f $tmp_attrs

    local url="$geoserver/wfs?typeName=$profile&SERVICE=WFS&outputFormat=csv&REQUEST=GetFeature&VERSION=1.0.0"
    local parameters="CQL_FILTER=time >= $time_coverage_start and time <= $time_coverage_end"

    logger_info "Getting list of URLs from '$url' with parameters '$parameters'"
    # get list of files from geoserver
    curl $CURL_OPTS -s "$url" --get --data-urlencode "$parameters" |\
        tail -n+2 | cut -d',' -f3 > $output_file

    format_output_file $output_file
}

# this function takes a semicolon separated subset and should produce viable
# parameters for the ncks command
# for the default implementation we just subset on all given parameters
# $1 - profile name
# $2 - subset to apply
get_subset_command() {
    local profile=$1; shift
    local subset="$1"; shift

    # https://github.com/aodn/aodn-portal/issues/1093
    subset=`remove_attribute $subset TIME`

    # LATITUDE,-33.433849,-30.150743;LONGTITUDE,113.15197,115.741219 becomes:
    # -d LATITUDE,-33.433849,-30.150743 -d LONGTITUDE,113.15197,115.741219
    local ncks_arguments="-d "`echo $subset | sed -e 's/;$//' -e 's/;/ -d /g'`
    echo $ncks_arguments
}

# this function takes a semicolon separated subset and an aggregated file and
# should update its header (metadata)
# $1 - profile name
# $2 - aggregated file
# $3 - subset applied (semicolon separated)
update_header() {
    local profile=$1; shift
    local aggregated_file="$1"; shift
    local subset="$1"; shift

    # make attributes greppable!
    local tmp_attrs=`mktemp`
    echo "$subset" | tr -s ";" "\n" > $tmp_attrs

    # update title
    local title=`ncks -M $aggregated_file  | grep "^Global attribute [0-9]\+: title," | grep -o "value = .*" | cut -d' ' -f3-`
    local title=${title%,*} # trim current time in title

    local geospatial_lat_min=`grep "^LATITUDE," $tmp_attrs | cut -d, -f2`
    local geospatial_lat_max=`grep "^LATITUDE," $tmp_attrs | cut -d, -f3`
    local geospatial_lon_min=`grep "^LONGITUDE," $tmp_attrs | cut -d, -f2`
    local geospatial_lon_max=`grep "^LONGITUDE," $tmp_attrs | cut -d, -f3`
    local time_coverage_start=`grep "^TIME," $tmp_attrs | cut -d, -f2`
    local time_coverage_end=`grep "^TIME," $tmp_attrs | cut -d, -f3`

    rm -f $tmp_attrs

    [ x"$geospatial_lat_min"  != x ] && ncatted -O -h -a geospatial_lat_min,global,o,c,"$geospatial_lat_min"   "$aggregated_file"
    [ x"$geospatial_lat_max"  != x ] && ncatted -O -h -a geospatial_lat_max,global,o,c,"$geospatial_lat_max"   "$aggregated_file"
    [ x"$geospatial_lon_min"  != x ] && ncatted -O -h -a geospatial_lon_min,global,o,c,"$geospatial_lon_min"   "$aggregated_file"
    [ x"$geospatial_lon_max"  != x ] && ncatted -O -h -a geospatial_lon_max,global,o,c,"$geospatial_lon_max"   "$aggregated_file"
    [ x"$time_coverage_start" != x ] && ncatted -O -h -a time_coverage_start,global,o,c,"$time_coverage_start" "$aggregated_file"
    [ x"$time_coverage_end"   != x ] && ncatted -O -h -a time_coverage_end,global,o,c,"$time_coverage_end"     "$aggregated_file"
    [ x"$title"               != x ] && ncatted -O -h -a title,global,o,c,"$title, $time_coverage_start, $time_coverage_end" "$aggregated_file"

    # if we didn't update the header - don't spoil the aggregation :)
    true
}
